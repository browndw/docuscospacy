from tmtoolkit.corpus import Corpus, vocabulary_size, doc_tokens, corpus_num_tokens, kwic
from tmtoolkit.tokenseq import pmi, pmi2, pmi3, token_match, index_windows_around_matches
import numpy as np
import pandas as pd

from .corpus_utils import _convert_totuple, _merge_tags, _merge_ds

def convert_corpus(tm_corpus):
    """
    A simple wrapper for coverting a tmtoolkit corpus in an nltk-like list of tuples.
    
    :param tm_corpus: A tmtoolkit corpus
    """
    docs = doc_tokens(tm_corpus, with_attr=True)
    tp = _convert_totuple(docs)
    return(tp)
 
def frequency_table(tok, n_tokens, count_by='pos'):
    """
    Generate a count of token frequencies. Returns a dataframe.
    
    :param tok: A list of tuples as generated by the convert_corpus function
    :param n_tokens: A count of total tokens agaist which to normalize
    :param count_by: One of 'pos' or 'ds' for aggregating tokens
    """
    if count_by == 'pos':
        tc = _merge_tags(tok)
    if count_by == 'ds':
        tc = _merge_ds(tok)
    phrase_range = []
    for i in range(0,len(tc)):
        phrase_range.append(list(set(tc[i])))
    phrase_range = [x for xs in phrase_range for x in xs]
    phrase_range = Counter(phrase_range)
    phrase_range = sorted(phrase_range.items(), key=lambda pair: pair[0], reverse=False)
    phrase_list = [x for xs in tc for x in xs]
    phrase_list = Counter(phrase_list)
    phrase_list = sorted(phrase_list.items(), key=lambda pair: pair[0], reverse=False)
    phrases = [x[0] for x in phrase_list]
    tags = [x[1] for x in phrases]
    if count_by == 'ds':
        tags = np.array([re.sub(r'([a-z])([A-Z])', '\\1 \\2', x) for x in tags])
    else:
        tags = np.array(tags)
    phrases = np.array([x[0] for x in phrases])
    phrase_freq = np.array([x[1] for x in phrase_list])
    phrase_prop = np.array(phrase_freq)/n_tokens*1000000
    phrase_range = np.array([x[1] for x in phrase_range])/len(tok)*100
    phrase_range = phrase_range.round(decimals=2)
    phrase_counts = list(zip(phrases.tolist(), tags.tolist(), phrase_freq.tolist(), phrase_prop.tolist(), phrase_range.tolist()))
    phrase_counts = pd.DataFrame(phrase_counts, columns=['Token', 'Tag', 'AF', 'RF', 'Range'])
    return(phrase_counts)
